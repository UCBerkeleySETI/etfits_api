# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_s6fits', [dirname(__file__)])
        except ImportError:
            import _s6fits
            return _s6fits
        if fp is not None:
            try:
                _mod = imp.load_module('_s6fits', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _s6fits = swig_import_helper()
    del swig_import_helper
else:
    import _s6fits
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import collections
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _s6fits.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _s6fits.SwigPyIterator_value(self)
    def incr(self, n=1): return _s6fits.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _s6fits.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _s6fits.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _s6fits.SwigPyIterator_equal(self, *args)
    def copy(self): return _s6fits.SwigPyIterator_copy(self)
    def next(self): return _s6fits.SwigPyIterator_next(self)
    def __next__(self): return _s6fits.SwigPyIterator___next__(self)
    def previous(self): return _s6fits.SwigPyIterator_previous(self)
    def advance(self, *args): return _s6fits.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _s6fits.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _s6fits.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _s6fits.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _s6fits.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _s6fits.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _s6fits.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _s6fits.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class s6hits_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, s6hits_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, s6hits_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["julian_date"] = _s6fits.s6hits_t_julian_date_set
    __swig_getmethods__["julian_date"] = _s6fits.s6hits_t_julian_date_get
    if _newclass:julian_date = _swig_property(_s6fits.s6hits_t_julian_date_get, _s6fits.s6hits_t_julian_date_set)
    __swig_setmethods__["unix_time"] = _s6fits.s6hits_t_unix_time_set
    __swig_getmethods__["unix_time"] = _s6fits.s6hits_t_unix_time_get
    if _newclass:unix_time = _swig_property(_s6fits.s6hits_t_unix_time_get, _s6fits.s6hits_t_unix_time_set)
    __swig_setmethods__["bors"] = _s6fits.s6hits_t_bors_set
    __swig_getmethods__["bors"] = _s6fits.s6hits_t_bors_get
    if _newclass:bors = _swig_property(_s6fits.s6hits_t_bors_get, _s6fits.s6hits_t_bors_set)
    __swig_setmethods__["ra"] = _s6fits.s6hits_t_ra_set
    __swig_getmethods__["ra"] = _s6fits.s6hits_t_ra_get
    if _newclass:ra = _swig_property(_s6fits.s6hits_t_ra_get, _s6fits.s6hits_t_ra_set)
    __swig_setmethods__["dec"] = _s6fits.s6hits_t_dec_set
    __swig_getmethods__["dec"] = _s6fits.s6hits_t_dec_get
    if _newclass:dec = _swig_property(_s6fits.s6hits_t_dec_get, _s6fits.s6hits_t_dec_set)
    __swig_setmethods__["detected_power"] = _s6fits.s6hits_t_detected_power_set
    __swig_getmethods__["detected_power"] = _s6fits.s6hits_t_detected_power_get
    if _newclass:detected_power = _swig_property(_s6fits.s6hits_t_detected_power_get, _s6fits.s6hits_t_detected_power_set)
    __swig_setmethods__["mean_power"] = _s6fits.s6hits_t_mean_power_set
    __swig_getmethods__["mean_power"] = _s6fits.s6hits_t_mean_power_get
    if _newclass:mean_power = _swig_property(_s6fits.s6hits_t_mean_power_get, _s6fits.s6hits_t_mean_power_set)
    __swig_setmethods__["fine_channel_bin"] = _s6fits.s6hits_t_fine_channel_bin_set
    __swig_getmethods__["fine_channel_bin"] = _s6fits.s6hits_t_fine_channel_bin_get
    if _newclass:fine_channel_bin = _swig_property(_s6fits.s6hits_t_fine_channel_bin_get, _s6fits.s6hits_t_fine_channel_bin_set)
    __swig_setmethods__["coarse_channel_bin"] = _s6fits.s6hits_t_coarse_channel_bin_set
    __swig_getmethods__["coarse_channel_bin"] = _s6fits.s6hits_t_coarse_channel_bin_get
    if _newclass:coarse_channel_bin = _swig_property(_s6fits.s6hits_t_coarse_channel_bin_get, _s6fits.s6hits_t_coarse_channel_bin_set)
    __swig_setmethods__["user_flag"] = _s6fits.s6hits_t_user_flag_set
    __swig_getmethods__["user_flag"] = _s6fits.s6hits_t_user_flag_get
    if _newclass:user_flag = _swig_property(_s6fits.s6hits_t_user_flag_get, _s6fits.s6hits_t_user_flag_set)
    __swig_setmethods__["ifreq"] = _s6fits.s6hits_t_ifreq_set
    __swig_getmethods__["ifreq"] = _s6fits.s6hits_t_ifreq_get
    if _newclass:ifreq = _swig_property(_s6fits.s6hits_t_ifreq_get, _s6fits.s6hits_t_ifreq_set)
    __swig_setmethods__["rfreq"] = _s6fits.s6hits_t_rfreq_set
    __swig_getmethods__["rfreq"] = _s6fits.s6hits_t_rfreq_get
    if _newclass:rfreq = _swig_property(_s6fits.s6hits_t_rfreq_get, _s6fits.s6hits_t_rfreq_set)
    __swig_setmethods__["rf_center"] = _s6fits.s6hits_t_rf_center_set
    __swig_getmethods__["rf_center"] = _s6fits.s6hits_t_rf_center_get
    if _newclass:rf_center = _swig_property(_s6fits.s6hits_t_rf_center_get, _s6fits.s6hits_t_rf_center_set)
    def __init__(self): 
        this = _s6fits.new_s6hits_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _s6fits.delete_s6hits_t
    __del__ = lambda self : None;
s6hits_t_swigregister = _s6fits.s6hits_t_swigregister
s6hits_t_swigregister(s6hits_t)

class s6ccpowers_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, s6ccpowers_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, s6ccpowers_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["julian_date"] = _s6fits.s6ccpowers_t_julian_date_set
    __swig_getmethods__["julian_date"] = _s6fits.s6ccpowers_t_julian_date_get
    if _newclass:julian_date = _swig_property(_s6fits.s6ccpowers_t_julian_date_get, _s6fits.s6ccpowers_t_julian_date_set)
    __swig_setmethods__["unix_time"] = _s6fits.s6ccpowers_t_unix_time_set
    __swig_getmethods__["unix_time"] = _s6fits.s6ccpowers_t_unix_time_get
    if _newclass:unix_time = _swig_property(_s6fits.s6ccpowers_t_unix_time_get, _s6fits.s6ccpowers_t_unix_time_set)
    __swig_setmethods__["ra"] = _s6fits.s6ccpowers_t_ra_set
    __swig_getmethods__["ra"] = _s6fits.s6ccpowers_t_ra_get
    if _newclass:ra = _swig_property(_s6fits.s6ccpowers_t_ra_get, _s6fits.s6ccpowers_t_ra_set)
    __swig_setmethods__["dec"] = _s6fits.s6ccpowers_t_dec_set
    __swig_getmethods__["dec"] = _s6fits.s6ccpowers_t_dec_get
    if _newclass:dec = _swig_property(_s6fits.s6ccpowers_t_dec_get, _s6fits.s6ccpowers_t_dec_set)
    __swig_setmethods__["beam"] = _s6fits.s6ccpowers_t_beam_set
    __swig_getmethods__["beam"] = _s6fits.s6ccpowers_t_beam_get
    if _newclass:beam = _swig_property(_s6fits.s6ccpowers_t_beam_get, _s6fits.s6ccpowers_t_beam_set)
    __swig_setmethods__["coarse_channel_bin"] = _s6fits.s6ccpowers_t_coarse_channel_bin_set
    __swig_getmethods__["coarse_channel_bin"] = _s6fits.s6ccpowers_t_coarse_channel_bin_get
    if _newclass:coarse_channel_bin = _swig_property(_s6fits.s6ccpowers_t_coarse_channel_bin_get, _s6fits.s6ccpowers_t_coarse_channel_bin_set)
    __swig_setmethods__["power_x"] = _s6fits.s6ccpowers_t_power_x_set
    __swig_getmethods__["power_x"] = _s6fits.s6ccpowers_t_power_x_get
    if _newclass:power_x = _swig_property(_s6fits.s6ccpowers_t_power_x_get, _s6fits.s6ccpowers_t_power_x_set)
    __swig_setmethods__["power_y"] = _s6fits.s6ccpowers_t_power_y_set
    __swig_getmethods__["power_y"] = _s6fits.s6ccpowers_t_power_y_get
    if _newclass:power_y = _swig_property(_s6fits.s6ccpowers_t_power_y_get, _s6fits.s6ccpowers_t_power_y_set)
    def __init__(self): 
        this = _s6fits.new_s6ccpowers_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _s6fits.delete_s6ccpowers_t
    __del__ = lambda self : None;
s6ccpowers_t_swigregister = _s6fits.s6ccpowers_t_swigregister
s6ccpowers_t_swigregister(s6ccpowers_t)

class s6hitsheader_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, s6hitsheader_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, s6hitsheader_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["julian_date"] = _s6fits.s6hitsheader_t_julian_date_set
    __swig_getmethods__["julian_date"] = _s6fits.s6hitsheader_t_julian_date_get
    if _newclass:julian_date = _swig_property(_s6fits.s6hitsheader_t_julian_date_get, _s6fits.s6hitsheader_t_julian_date_set)
    __swig_setmethods__["unix_time"] = _s6fits.s6hitsheader_t_unix_time_set
    __swig_getmethods__["unix_time"] = _s6fits.s6hitsheader_t_unix_time_get
    if _newclass:unix_time = _swig_property(_s6fits.s6hitsheader_t_unix_time_get, _s6fits.s6hitsheader_t_unix_time_set)
    __swig_setmethods__["ra"] = _s6fits.s6hitsheader_t_ra_set
    __swig_getmethods__["ra"] = _s6fits.s6hitsheader_t_ra_get
    if _newclass:ra = _swig_property(_s6fits.s6hitsheader_t_ra_get, _s6fits.s6hitsheader_t_ra_set)
    __swig_setmethods__["bors"] = _s6fits.s6hitsheader_t_bors_set
    __swig_getmethods__["bors"] = _s6fits.s6hitsheader_t_bors_get
    if _newclass:bors = _swig_property(_s6fits.s6hitsheader_t_bors_get, _s6fits.s6hitsheader_t_bors_set)
    __swig_setmethods__["dec"] = _s6fits.s6hitsheader_t_dec_set
    __swig_getmethods__["dec"] = _s6fits.s6hitsheader_t_dec_get
    if _newclass:dec = _swig_property(_s6fits.s6hitsheader_t_dec_get, _s6fits.s6hitsheader_t_dec_set)
    __swig_setmethods__["nhits"] = _s6fits.s6hitsheader_t_nhits_set
    __swig_getmethods__["nhits"] = _s6fits.s6hitsheader_t_nhits_get
    if _newclass:nhits = _swig_property(_s6fits.s6hitsheader_t_nhits_get, _s6fits.s6hitsheader_t_nhits_set)
    __swig_setmethods__["missedpk"] = _s6fits.s6hitsheader_t_missedpk_set
    __swig_getmethods__["missedpk"] = _s6fits.s6hitsheader_t_missedpk_get
    if _newclass:missedpk = _swig_property(_s6fits.s6hitsheader_t_missedpk_get, _s6fits.s6hitsheader_t_missedpk_set)
    def __init__(self): 
        this = _s6fits.new_s6hitsheader_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _s6fits.delete_s6hitsheader_t
    __del__ = lambda self : None;
s6hitsheader_t_swigregister = _s6fits.s6hitsheader_t_swigregister
s6hitsheader_t_swigregister(s6hitsheader_t)

class s6dataspec_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, s6dataspec_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, s6dataspec_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filename"] = _s6fits.s6dataspec_t_filename_set
    __swig_getmethods__["filename"] = _s6fits.s6dataspec_t_filename_get
    if _newclass:filename = _swig_property(_s6fits.s6dataspec_t_filename_get, _s6fits.s6dataspec_t_filename_set)
    __swig_setmethods__["s6hits"] = _s6fits.s6dataspec_t_s6hits_set
    __swig_getmethods__["s6hits"] = _s6fits.s6dataspec_t_s6hits_get
    if _newclass:s6hits = _swig_property(_s6fits.s6dataspec_t_s6hits_get, _s6fits.s6dataspec_t_s6hits_set)
    __swig_setmethods__["s6ccpowers"] = _s6fits.s6dataspec_t_s6ccpowers_set
    __swig_getmethods__["s6ccpowers"] = _s6fits.s6dataspec_t_s6ccpowers_get
    if _newclass:s6ccpowers = _swig_property(_s6fits.s6dataspec_t_s6ccpowers_get, _s6fits.s6dataspec_t_s6ccpowers_set)
    __swig_setmethods__["s6hitsheaders"] = _s6fits.s6dataspec_t_s6hitsheaders_set
    __swig_getmethods__["s6hitsheaders"] = _s6fits.s6dataspec_t_s6hitsheaders_get
    if _newclass:s6hitsheaders = _swig_property(_s6fits.s6dataspec_t_s6hitsheaders_get, _s6fits.s6dataspec_t_s6hitsheaders_set)
    __swig_setmethods__["sortby_ifreq"] = _s6fits.s6dataspec_t_sortby_ifreq_set
    __swig_getmethods__["sortby_ifreq"] = _s6fits.s6dataspec_t_sortby_ifreq_get
    if _newclass:sortby_ifreq = _swig_property(_s6fits.s6dataspec_t_sortby_ifreq_get, _s6fits.s6dataspec_t_sortby_ifreq_set)
    __swig_setmethods__["sortby_rfreq"] = _s6fits.s6dataspec_t_sortby_rfreq_set
    __swig_getmethods__["sortby_rfreq"] = _s6fits.s6dataspec_t_sortby_rfreq_get
    if _newclass:sortby_rfreq = _swig_property(_s6fits.s6dataspec_t_sortby_rfreq_get, _s6fits.s6dataspec_t_sortby_rfreq_set)
    __swig_setmethods__["sortby_time"] = _s6fits.s6dataspec_t_sortby_time_set
    __swig_getmethods__["sortby_time"] = _s6fits.s6dataspec_t_sortby_time_get
    if _newclass:sortby_time = _swig_property(_s6fits.s6dataspec_t_sortby_time_get, _s6fits.s6dataspec_t_sortby_time_set)
    __swig_setmethods__["sortby_bors"] = _s6fits.s6dataspec_t_sortby_bors_set
    __swig_getmethods__["sortby_bors"] = _s6fits.s6dataspec_t_sortby_bors_get
    if _newclass:sortby_bors = _swig_property(_s6fits.s6dataspec_t_sortby_bors_get, _s6fits.s6dataspec_t_sortby_bors_set)
    __swig_setmethods__["filterby_rf_center_mode"] = _s6fits.s6dataspec_t_filterby_rf_center_mode_set
    __swig_getmethods__["filterby_rf_center_mode"] = _s6fits.s6dataspec_t_filterby_rf_center_mode_get
    if _newclass:filterby_rf_center_mode = _swig_property(_s6fits.s6dataspec_t_filterby_rf_center_mode_get, _s6fits.s6dataspec_t_filterby_rf_center_mode_set)
    __swig_setmethods__["total_missedpk"] = _s6fits.s6dataspec_t_total_missedpk_set
    __swig_getmethods__["total_missedpk"] = _s6fits.s6dataspec_t_total_missedpk_get
    if _newclass:total_missedpk = _swig_property(_s6fits.s6dataspec_t_total_missedpk_get, _s6fits.s6dataspec_t_total_missedpk_set)
    __swig_setmethods__["threshold"] = _s6fits.s6dataspec_t_threshold_set
    __swig_getmethods__["threshold"] = _s6fits.s6dataspec_t_threshold_get
    if _newclass:threshold = _swig_property(_s6fits.s6dataspec_t_threshold_get, _s6fits.s6dataspec_t_threshold_set)
    __swig_setmethods__["bors"] = _s6fits.s6dataspec_t_bors_set
    __swig_getmethods__["bors"] = _s6fits.s6dataspec_t_bors_get
    if _newclass:bors = _swig_property(_s6fits.s6dataspec_t_bors_get, _s6fits.s6dataspec_t_bors_set)
    __swig_setmethods__["channels"] = _s6fits.s6dataspec_t_channels_set
    __swig_getmethods__["channels"] = _s6fits.s6dataspec_t_channels_get
    if _newclass:channels = _swig_property(_s6fits.s6dataspec_t_channels_get, _s6fits.s6dataspec_t_channels_set)
    __swig_setmethods__["errorcode"] = _s6fits.s6dataspec_t_errorcode_set
    __swig_getmethods__["errorcode"] = _s6fits.s6dataspec_t_errorcode_get
    if _newclass:errorcode = _swig_property(_s6fits.s6dataspec_t_errorcode_get, _s6fits.s6dataspec_t_errorcode_set)
    __swig_setmethods__["ciftsio_error"] = _s6fits.s6dataspec_t_ciftsio_error_set
    __swig_getmethods__["ciftsio_error"] = _s6fits.s6dataspec_t_ciftsio_error_get
    if _newclass:ciftsio_error = _swig_property(_s6fits.s6dataspec_t_ciftsio_error_get, _s6fits.s6dataspec_t_ciftsio_error_set)
    def __init__(self): 
        this = _s6fits.new_s6dataspec_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _s6fits.delete_s6dataspec_t
    __del__ = lambda self : None;
s6dataspec_t_swigregister = _s6fits.s6dataspec_t_swigregister
s6dataspec_t_swigregister(s6dataspec_t)


def get_s6data(*args):
  return _s6fits.get_s6data(*args)
get_s6data = _s6fits.get_s6data

def get_s6ccpowers(*args):
  return _s6fits.get_s6ccpowers(*args)
get_s6ccpowers = _s6fits.get_s6ccpowers

def get_s6hitsheaders(*args):
  return _s6fits.get_s6hitsheaders(*args)
get_s6hitsheaders = _s6fits.get_s6hitsheaders

def get_time_over_file(*args):
  return _s6fits.get_time_over_file(*args)
get_time_over_file = _s6fits.get_time_over_file

def get_hits_over_file(*args):
  return _s6fits.get_hits_over_file(*args)
get_hits_over_file = _s6fits.get_hits_over_file

def print_hits_structure(*args):
  return _s6fits.print_hits_structure(*args)
print_hits_structure = _s6fits.print_hits_structure

def print_hits_table(*args):
  return _s6fits.print_hits_table(*args)
print_hits_table = _s6fits.print_hits_table

def print_hits_header_table(*args):
  return _s6fits.print_hits_header_table(*args)
print_hits_header_table = _s6fits.print_hits_header_table

def print_ccpowers_table(*args):
  return _s6fits.print_ccpowers_table(*args)
print_ccpowers_table = _s6fits.print_ccpowers_table
class s6Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, s6Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, s6Vector, name)
    __repr__ = _swig_repr
    def iterator(self): return _s6fits.s6Vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _s6fits.s6Vector___nonzero__(self)
    def __bool__(self): return _s6fits.s6Vector___bool__(self)
    def __len__(self): return _s6fits.s6Vector___len__(self)
    def pop(self): return _s6fits.s6Vector_pop(self)
    def __getslice__(self, *args): return _s6fits.s6Vector___getslice__(self, *args)
    def __setslice__(self, *args): return _s6fits.s6Vector___setslice__(self, *args)
    def __delslice__(self, *args): return _s6fits.s6Vector___delslice__(self, *args)
    def __delitem__(self, *args): return _s6fits.s6Vector___delitem__(self, *args)
    def __getitem__(self, *args): return _s6fits.s6Vector___getitem__(self, *args)
    def __setitem__(self, *args): return _s6fits.s6Vector___setitem__(self, *args)
    def append(self, *args): return _s6fits.s6Vector_append(self, *args)
    def empty(self): return _s6fits.s6Vector_empty(self)
    def size(self): return _s6fits.s6Vector_size(self)
    def clear(self): return _s6fits.s6Vector_clear(self)
    def swap(self, *args): return _s6fits.s6Vector_swap(self, *args)
    def get_allocator(self): return _s6fits.s6Vector_get_allocator(self)
    def begin(self): return _s6fits.s6Vector_begin(self)
    def end(self): return _s6fits.s6Vector_end(self)
    def rbegin(self): return _s6fits.s6Vector_rbegin(self)
    def rend(self): return _s6fits.s6Vector_rend(self)
    def pop_back(self): return _s6fits.s6Vector_pop_back(self)
    def erase(self, *args): return _s6fits.s6Vector_erase(self, *args)
    def __init__(self, *args): 
        this = _s6fits.new_s6Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _s6fits.s6Vector_push_back(self, *args)
    def front(self): return _s6fits.s6Vector_front(self)
    def back(self): return _s6fits.s6Vector_back(self)
    def assign(self, *args): return _s6fits.s6Vector_assign(self, *args)
    def resize(self, *args): return _s6fits.s6Vector_resize(self, *args)
    def insert(self, *args): return _s6fits.s6Vector_insert(self, *args)
    def reserve(self, *args): return _s6fits.s6Vector_reserve(self, *args)
    def capacity(self): return _s6fits.s6Vector_capacity(self)
    __swig_destroy__ = _s6fits.delete_s6Vector
    __del__ = lambda self : None;
s6Vector_swigregister = _s6fits.s6Vector_swigregister
s6Vector_swigregister(s6Vector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _s6fits.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _s6fits.IntVector___nonzero__(self)
    def __bool__(self): return _s6fits.IntVector___bool__(self)
    def __len__(self): return _s6fits.IntVector___len__(self)
    def pop(self): return _s6fits.IntVector_pop(self)
    def __getslice__(self, *args): return _s6fits.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _s6fits.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _s6fits.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _s6fits.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _s6fits.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _s6fits.IntVector___setitem__(self, *args)
    def append(self, *args): return _s6fits.IntVector_append(self, *args)
    def empty(self): return _s6fits.IntVector_empty(self)
    def size(self): return _s6fits.IntVector_size(self)
    def clear(self): return _s6fits.IntVector_clear(self)
    def swap(self, *args): return _s6fits.IntVector_swap(self, *args)
    def get_allocator(self): return _s6fits.IntVector_get_allocator(self)
    def begin(self): return _s6fits.IntVector_begin(self)
    def end(self): return _s6fits.IntVector_end(self)
    def rbegin(self): return _s6fits.IntVector_rbegin(self)
    def rend(self): return _s6fits.IntVector_rend(self)
    def pop_back(self): return _s6fits.IntVector_pop_back(self)
    def erase(self, *args): return _s6fits.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _s6fits.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _s6fits.IntVector_push_back(self, *args)
    def front(self): return _s6fits.IntVector_front(self)
    def back(self): return _s6fits.IntVector_back(self)
    def assign(self, *args): return _s6fits.IntVector_assign(self, *args)
    def resize(self, *args): return _s6fits.IntVector_resize(self, *args)
    def insert(self, *args): return _s6fits.IntVector_insert(self, *args)
    def reserve(self, *args): return _s6fits.IntVector_reserve(self, *args)
    def capacity(self): return _s6fits.IntVector_capacity(self)
    __swig_destroy__ = _s6fits.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _s6fits.IntVector_swigregister
IntVector_swigregister(IntVector)

# This file is compatible with both classic and new-style classes.


